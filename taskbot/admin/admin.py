import asyncio
import re
from loguru import logger
from typing import List
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.utils.chat_action import ChatActionSender
from config import bot
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import create_model
from taskbot.admin.kbs import admin_kb, task_kb, role_kb, role_list_kb, employee_kb
from taskbot.dao.session_maker import connection
from taskbot.dao.dao import UserDAO, RoleDAO
from taskbot.dao.schemas import UserDto, RoleDto
from taskbot.admin.schemas import UserTelegramId, UserRoleId

async def addAdmin(message: Message, session_without_commit: AsyncSession):
    role = await RoleDAO.find_one_or_none_by_id(session_without_commit, 1)
    return UserDto(
        first_name=message.from_user.first_name,
        second_name=message.from_user.last_name,
        telegram_id=message.from_user.id,
        role_id=1,
        role=role
    )

async def addEmployee(message: Message, session_without_commit: AsyncSession):
    role = await RoleDAO.find_one_or_none_by_id(session_without_commit, 3)
    return UserDto(
        first_name=message.from_user.first_name,
        second_name=message.from_user.last_name,
        telegram_id=message.from_user.id,
        role_id=3,
        role=role
    )


admin_router = Router()


@admin_router.message(Command("help"))
async def cmd_help(message: Message):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/help")
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:",
        reply_markup=None
    )


@admin_router.message(CommandStart())
async def cmd_start(message: Message, session_without_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/start")
    
    filterModel = UserRoleId(role_id=1)
    admins = await UserDAO.find_all(session_without_commit, filterModel)

    # if (admins.count == 0):
    #     role = await RoleDAO.find_one_or_none_by_id(session, 1)
    #     newUser = UserDto(
    #         first_name=message.from_user.first_name,
    #         second_name=message.from_user.last_name,
    #         telegram_id=message.from_user.id,
    #         role_id=1,
    #         role=role
    #     )
    # else:
    #     role = await RoleDAO.find_one_or_none_by_id(session, 3)
    #     newUser = UserDto(
    #         first_name=message.from_user.first_name,
    #         second_name=message.from_user.last_name,
    #         telegram_id=message.from_user.id,
    #         role_id=3,
    #         role=role
    #     )

    # await UserDAO.add(session, newUser)
    # session_without_commit.commit()
    
    for admin in admins:
        if (admin.telegram_id == message.from_user.id):
            return await message.answer(
                f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                reply_markup=None
            )

    # await message.answer(
    #     f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role.name}",
    #     reply_markup=admin_kb()
    # )


# @admin_router.message(Command("bot_stop"))
# async def cmd_stop(call: CallbackQuery):
#     logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /stop")
#     await bot.close()


@admin_router.message(Command('admin_panel'))
async def admin_panel(message: Message, session_without_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/admin_panel")

    user_id = message.from_user.id
    user = await UserDAO.find_one_or_none(session_without_commit, UserTelegramId(telegram_id=user_id))
    
    if (user):
        return await message.answer(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_kb()
        )
    
    await message.answer(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )


@admin_router.callback_query(F.data == "admin_panel")
async def admin_panel(call: CallbackQuery, session_without_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/admin_panel")
    
    user_id = call.from_user.id
    user = await UserDAO.find_one_or_none(session_without_commit, UserTelegramId(telegram_id=user_id))

    if (user):
        await call.answer("–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        return await call.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_kb()
        )

    await call.message.edit_text(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )

# #
# Employee routes
# #
@admin_router.message(Command("employee_menu"))
async def employee_menu(message: Message):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/employee_menu")
    await message.answer(
        text=f"–ú–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:",
        reply_markup=employee_kb()
    )


@admin_router.callback_query(F.data == "employee_menu")
async def employee_menu(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/employee_menu")
    await call.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:",
        reply_markup=employee_kb()
    )


@admin_router.callback_query(F.data == "employee_list")
async def employee_list(call: CallbackQuery, session_without_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/employee_list")
    
    employees = await UserDAO.find_all(session_without_commit, UserRoleId(role_id=3))

    data = (
        f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
    )

    for employee in employees:
        data += (
            f"{employee}\n"
        )
        
    await call.message.edit_text(
        text=f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:",
        reply_markup=None
    )


@admin_router.callback_query(F.data == "employee_add")
async def employee_add():
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/employee_add")
    await bot.send_message(
        chat_id="", 
        text="–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    )
    

# #
# Task routes
# #
@admin_router.message(Command("task_menu"))
async def task_menu(message: Message):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/task_menu")
    await message.answer(
        text=f"–ú–µ–Ω—é –¥–ª—è –∑–∞–¥–∞—á:",
        reply_markup=task_kb()
    )


@admin_router.callback_query(F.data == "task_menu")
async def task_menu(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/task_menu")
    await call.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏:",
        reply_markup=task_kb()
    )


@admin_router.callback_query(F.data == "task_list")
async def task_list(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/task_list")
    await call.message.edit_text(
        text=f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:",
        reply_markup=None
    )


# #
# Message routes
# #
@admin_router.callback_query(F.data == "send_messages")
async def send_messages(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/messages")
    await call.message.edit_text(
        text=f"–ü–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
        reply_markup=None
    )

