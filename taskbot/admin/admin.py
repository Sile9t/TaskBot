import asyncio
from loguru import logger
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from config import bot
from sqlalchemy.ext.asyncio import AsyncSession
from taskbot.admin.kbs import admin_kb, task_kb, employee_kb
from taskbot.dao.dao import UserDAO
from taskbot.dao.session_maker import connection
from taskbot.admin.schemas import UserTelegramId

admin_router = Router()


@admin_router.message(Command("help"))
async def cmd_help(message: Message):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /help")
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:"
    )


@admin_router.message(CommandStart())
async def cmd_start(message: Message):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start")
    await message.answer(
        f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.chat.id}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=admin_kb()
    )


# @admin_router.message(Command("bot_stop"))
# async def cmd_stop(call: CallbackQuery):
#     logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /stop")
#     await bot.close()


@admin_router.callback_query(F.data == "admin_panel")
@connection
async def admin_panel(call: CallbackQuery, session: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start_admin")
    
    user_id = call.from_user.id
    user = await UserDAO.find_one_or_none(session, UserTelegramId(telegram_id=user_id))

    if (user):
        await call.answer("–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        return await call.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_kb()
        )

    await call.message.edit_text(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω_–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )


@admin_router.callback_query(F.data == 'role_menu')
async def role_menu(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /role_menu")

    


@admin_router.callback_query(F.data == "employee_menu")
async def employee_menu(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /employee_menu")
    await call.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:",
        reply_markup=employee_kb()
    )


@admin_router.callback_query(F.data == "employee_list")
async def employee_list(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /employee_list")
    await call.message.edit_text(
        text=f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:",
        reply_markup=None
    )


@admin_router.callback_query(F.data == "employee_add")
async def employee_add():
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /employee_add")
    await bot.send_message(
        chat_id="", 
        text="–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    )
    

@admin_router.callback_query(F.data == "task_list")
async def task_list(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /tasks")
    await call.message.edit_text(
        text=f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:",
        reply_markup=None
    )


@admin_router.callback_query(F.data == "task_menu")
async def task_menu(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /task_menu")
    await call.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏:",
        reply_markup=task_kb()
    )


@admin_router.callback_query(F.data == "send_messages")
async def send_messages(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /messages")
    await call.message.edit_text(
        text=f"–ü–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
        reply_markup=None
    )

