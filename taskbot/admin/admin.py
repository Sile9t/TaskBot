import asyncio
from datetime import datetime, timedelta
from loguru import logger
from typing import List
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery, Message, ChatJoinRequest
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from taskbot.admin.kbs import main_admin_kb
from taskbot.dao.models import User
from taskbot.dao.dao import UserDAO, RoleDAO
from taskbot.dao.schemas import UserDtoBase, RoleDto
from taskbot.admin.schemas import UserTelegramId, UserRoleId
from taskbot.admin.filters import IsAdmin


async def getAdminFromMessage(message: Message, session_without_commit: AsyncSession):
    role = await RoleDAO.find_one_or_none_by_id(session_without_commit, 1)
    return UserDtoBase(
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        telegram_id=message.from_user.id,
        role_id=1,
        region_id=None
    )

async def getEmployeeFromMessage(message: Message, session_without_commit: AsyncSession):
    role = await RoleDAO.find_one_or_none_by_id(session_without_commit, 3)
    return UserDtoBase(
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        telegram_id=message.from_user.id,
        role_id=3,
        region_id=None
    )


admin_router = Router()
admin_router.message.filter(IsAdmin)


@admin_router.message(Command("help"))
async def cmd_help(message: Message):
    logger.info(f"chat#{message.chat.id}|user#{message.from_user.id}: –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/help")
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:",
        reply_markup=None
    )


@admin_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    logger.info(f"chat#{message.chat.id}|user#{message.from_user.id}: –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/start")
    
    tgIdFilter = UserTelegramId(
        telegram_id=message.from_user.id
    )
    check = await UserDAO.find_one_or_none(session_with_commit, tgIdFilter)
    
    if check is None:
        filterModel = UserRoleId(role_id=1)
        admins = await UserDAO.find_all(session_with_commit, filterModel)

        logger.info(
            f"\n\tUser:\n"
            f"\t\t{message.from_user.first_name}\n"
            f"\t\t{message.from_user.last_name}\n"
            f"\t\t{message.from_user.id}\n"
        )
        
        if (admins.count == 0):
            newUser = await getAdminFromMessage(message, session_with_commit)
        else:
            newUser = await getEmployeeFromMessage(message, session_with_commit)

        await UserDAO.add(session_with_commit, newUser)
        
        for admin in admins:
            if (admin.telegram_id == message.from_user.id):
                return await message.answer(
                    f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {message.from_user.full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                    reply_markup=None
                )
        
        userRole = await RoleDAO.find_one_or_none_by_id(session_with_commit, newUser.role_id)

        return await message.answer(
            f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {userRole.name}.",
            reply_markup=None
        )

    await message.answer(
        f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {check.role.name}.",
        reply_markup=main_admin_kb()
    )


@admin_router.message(Command('admin_panel'))
async def admin_panel(message: Message, session_without_commit: AsyncSession):
    logger.info(f"chat#{message.chat.id}|user#{message.from_user.id}: –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/admin_panel")

    user_id = message.from_user.id
    user = await UserDAO.find_one_or_none(session_without_commit, UserTelegramId(telegram_id=user_id))
    
    if (user.role_id == 1):
        return await message.answer(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_admin_kb()
        )
    
    await message.answer(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )


@admin_router.callback_query(F.data == "admin_panel")
async def admin_panel(call: CallbackQuery, session_without_commit: AsyncSession):
    logger.info(f"chat#{message.chat.id}|user#{message.from_user.id}: –í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/admin_panel")
    
    user_id = call.from_user.id
    user = await UserDAO.find_one_or_none(session_without_commit, UserTelegramId(telegram_id=user_id))

    if (user.role_id == 1):
        await call.answer("–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        return await call.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_admin_kb()
        )

    await call.message.edit_text(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )


@admin_router.message(Command('refer_link'))
async def refer_link(message: Message):
    logger.info(f"chat#{message.chat.id}|user#{message.from_user.id}: Command - admin/refer_link")

    if (message.chat.type == 'private'):
        return await message.answer(
            "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–∞—Ç–æ–≤. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π. –ï—Å–ª–∏ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ - —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    chat_id = message.chat.id
    expire_date = datetime.now() + timedelta(days=1)
    try:
        invite_link_obj = await message.bot.create_chat_invite_link(
            chat_id=chat_id,
            expire_date=expire_date.timestamp(),
            member_limit=1
        )
        #TODO: add invite link to database for revoke passibility
        
        invite_link = invite_link_obj.invite_link
    except Exception as e:        
        return message.answer(
            text=e.message
        )
    
    text = (f"–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n"
            f"üîó <code>{invite_link}</code> (–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
            f"‚ùó (–†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –¥–ª—è 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"
    )

    await message.answer(
        text=text,
        reply_markup=None
    )


@admin_router.message(Command('cancel_all_refer_links'))
async def cancel_all_refer_links(message: Message):
    logger.info(f"chat#{message.chat.id}|user#{message.from_user.id}: Command - admin/cancel_all_refer_links")
    #TODO: get all invite link for user, revoke them all and delete from db
    message.bot.revoke_chat_invite_link()


#TODO:
# #
# Message routes
# #
@admin_router.callback_query(F.data == "send_messages")
async def send_messages(call: CallbackQuery):
    logger.info(f"chat#{call.message.chat.id}|user#{call.message.from_user.id}: –í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/messages")
    await call.message.edit_text(
        text=f"–ü–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
        reply_markup=None
    )

