import asyncio
from loguru import logger
from typing import List
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from pydantic import BaseModel
from sqlalchemy.orm import lazyload
from sqlalchemy.ext.asyncio import AsyncSession
from taskbot.admin.kbs import main_admin_kb, task_kb, employee_kb
from taskbot.dao.models import User
from taskbot.dao.dao import UserDAO, RoleDAO
from taskbot.dao.schemas import UserDtoBase, RoleDto
from taskbot.admin.schemas import UserTelegramId, UserRoleId

async def getAdminFromMessage(message: Message, session_without_commit: AsyncSession):
    role = await RoleDAO.find_one_or_none_by_id(session_without_commit, 1)
    return UserDtoBase(
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        telegram_id=message.from_user.id,
        role_id=1,
        region_id=None
    )

async def getEmployeeFromMessage(message: Message, session_without_commit: AsyncSession):
    role = await RoleDAO.find_one_or_none_by_id(session_without_commit, 3)
    return UserDtoBase(
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        telegram_id=message.from_user.id,
        role_id=3,
        region_id=None
    )


admin_router = Router()


@admin_router.message(Command("help"))
async def cmd_help(message: Message):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/help")
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:",
        reply_markup=None
    )


@admin_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/start")
    
    tgIdFilter = UserTelegramId(
        telegram_id=message.from_user.id
    )
    check = await UserDAO.find_one_or_none(session_with_commit, tgIdFilter)
    
    if check is None:
        filterModel = UserRoleId(role_id=1)
        admins = await UserDAO.find_all(session_with_commit, filterModel)

        logger.info(
            f"\n\tUser:\n"
            f"\t\t{message.from_user.first_name}\n"
            f"\t\t{message.from_user.last_name}\n"
            f"\t\t{message.from_user.id}\n"
        )
        
        if (admins.count == 0):
            newUser = await getAdminFromMessage(message, session_with_commit)
        else:
            newUser = await getEmployeeFromMessage(message, session_with_commit)

        await UserDAO.add(session_with_commit, newUser)
        
        for admin in admins:
            if (admin.telegram_id == message.from_user.id):
                return await message.answer(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
                    reply_markup=None
                )
        
        return await message.answer(
            f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
            reply_markup=None
        )

    await message.answer(
        f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {check.role.name}",
        reply_markup=main_admin_kb()
    )


@admin_router.message(Command('admin_panel'))
async def admin_panel(message: Message, session_without_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã admin/admin_panel")

    user_id = message.from_user.id
    user = await UserDAO.find_one_or_none(session_without_commit, UserTelegramId(telegram_id=user_id))
    
    if (user.role_id == 1):
        return await message.answer(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_admin_kb()
        )
    
    await message.answer(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )


@admin_router.callback_query(F.data == "admin_panel")
async def admin_panel(call: CallbackQuery, session_without_commit: AsyncSession):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/admin_panel")
    
    user_id = call.from_user.id
    user = await UserDAO.find_one_or_none(session_without_commit, UserTelegramId(telegram_id=user_id))

    if (user.role_id == 1):
        await call.answer("–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        return await call.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_admin_kb()
        )

    await call.message.edit_text(
        text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!",
        reply_markup=None
    )


# #
# Message routes
# #
@admin_router.callback_query(F.data == "send_messages")
async def send_messages(call: CallbackQuery):
    logger.info("–í—ã–∑–æ–≤ –∫–Ω–æ–ø–∫–∏ admin/messages")
    await call.message.edit_text(
        text=f"–ü–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
        reply_markup=None
    )

